import streamlit as st
import joblib
import pandas as pd
import numpy as np

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
lr_model = joblib.load("linear_regression.pkl")
rf_model = joblib.load("random_forest.pkl")

# ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
sample_data = pd.read_csv("Housing.csv") 
sample_data = sample_data.drop(columns=["price"])  
feature_columns = sample_data.columns 

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤
st.set_page_config(
    page_title="üè° House Price Prediction",
    page_icon="üè†",
    layout="wide"
)

st.markdown("""
    <style>
        .header {
            text-align: center;
            color: #2C3E50;
            font-size: 32px;
            font-weight: bold;
            margin-top: 20px;
        }
        .subheader {
            font-size: 20px;
            color: #34495E;
            margin-bottom: 10px;
        }
        .input-section {
            padding: 20px;
            background-color: #f4f7f6;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .model-selection {
            background-color: #E0F7FA;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .button-style {
            background-color: #4CAF50; 
            color: white;
            padding: 12px 24px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .button-style:hover {
            background-color: #45a049;
        }
    </style>
""", unsafe_allow_html=True)

st.title("üè° House Price Prediction")

# ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
st.markdown('<p class="header">Select the model you want to use.    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ:</p>', unsafe_allow_html=True)

with st.expander("Choose a model    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•", expanded=True):
    model_choice = st.selectbox("Select the model you want to use.", ["Linear Regression", "Random Forest"], key="model")

# ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
st.markdown('<p class="header">Fill in the information to predict house prices.     ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô:</p>', unsafe_allow_html=True)

col1, col2 = st.columns(2)

with col1:
    area = st.number_input("Area (sq.m.)    ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡∏ï‡∏£.‡∏°.)", min_value=1, max_value=10000, value=200)
    bedrooms = st.number_input("Number of bedrooms.    ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô", min_value=1, max_value=10, value=3)
    bathrooms = st.number_input("Number of bathrooms.    ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", min_value=1, max_value=10, value=2)
    stories = st.number_input("Number of floors.     ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πâ‡∏ô", min_value=1, max_value=5, value=1)
    parking = st.number_input("Parking.     ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ", min_value=0, max_value=5, value=1)

with col2:
    mainroad = st.selectbox("Next to the main road.      ‡∏ï‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô‡πÉ‡∏´‡∏ç‡πà?", ["yes", "no"])
    guestroom = st.selectbox("There is a living room.     ‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏Ç‡∏Å?", ["yes", "no"])
    basement = st.selectbox("There is a basement.    ‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô?", ["yes", "no"])
    hotwaterheating = st.selectbox("There is a water heater.     ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏ô‡πâ‡∏≥‡∏≠‡∏∏‡πà‡∏ô?", ["yes", "no"])
    airconditioning = st.selectbox("There is air conditioning.      ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®?", ["yes", "no"])

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
prefarea = st.selectbox("Located in a special location.      ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏≥‡πÄ‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©?", ["yes", "no"])
furnishingstatus = st.selectbox("decoration     ‡∏Å‡∏≤‡∏£‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á", ["furnished", "semi-furnished", "unfurnished"])

# ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
if st.button("Price prediction      ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤"):
    # **‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï**
    input_data = pd.DataFrame([[area, bedrooms, bathrooms, stories, mainroad, guestroom, basement,
                                hotwaterheating, airconditioning, parking, prefarea, furnishingstatus]],
                              columns=["area", "bedrooms", "bathrooms", "stories", "mainroad", "guestroom",
                                       "basement", "hotwaterheating", "airconditioning", "parking",
                                       "prefarea", "furnishingstatus"])

    # **‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (Yes/No ‚Üí 1/0)**
    binary_mapping = {"yes": 1, "no": 0}
    for col in ["mainroad", "guestroom", "basement", "hotwaterheating", "airconditioning", "prefarea"]:
        input_data[col] = input_data[col].map(binary_mapping)

    # **One-hot encoding ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö `furnishingstatus`**
    input_data = pd.get_dummies(input_data, columns=["furnishingstatus"])

    # **‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö**
    missing_cols = set(lr_model.feature_names_in_) - set(input_data.columns)
    for col in missing_cols:
        input_data[col] = 0  # ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ 0 ‡πÉ‡∏´‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡πÑ‡∏õ

    # **‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•**
    input_data = input_data[lr_model.feature_names_in_]

    # **‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å**
    if model_choice == "Linear Regression":
        prediction = lr_model.predict(input_data)
    else:
        prediction = rf_model.predict(input_data)

    # **‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå**
    st.success(f"üì¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ: {prediction[0]:,.2f} ‡∏ö‡∏≤‡∏ó")
